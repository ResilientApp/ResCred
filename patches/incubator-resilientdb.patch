diff --git a/executor/contract/manager/address_manager.cpp b/executor/contract/manager/address_manager.cpp
index ca589f2b..ab51e91f 100644
--- a/executor/contract/manager/address_manager.cpp
+++ b/executor/contract/manager/address_manager.cpp
@@ -43,7 +43,7 @@ bool AddressManager::Exist(const Address& address) {
 }
 
 Address AddressManager::CreateContractAddress(const Address& owner) {
-  return eevm::generate_address(owner, 0u);
+  return eevm::generate_address(owner, rand());
 }
 
 std::string AddressManager::AddressToHex(const Address& address) {
diff --git a/executor/contract/manager/contract_manager.cpp b/executor/contract/manager/contract_manager.cpp
index 426a0b8a..057ecfe8 100644
--- a/executor/contract/manager/contract_manager.cpp
+++ b/executor/contract/manager/contract_manager.cpp
@@ -19,6 +19,8 @@
 
 #include "executor/contract/manager/contract_manager.h"
 
+#include <iterator>
+
 #include "eEVM/processor.h"
 #include "executor/contract/manager/address_manager.h"
 #include "glog/logging.h"
@@ -36,6 +38,50 @@ void AppendArgToInput(std::vector<uint8_t>& code, const std::string& arg) {
   AppendArgToInput(code, eevm::to_uint256(arg));
 }
 
+std::vector<std::string> ParamsToVector(
+    const google::protobuf::RepeatedPtrField<std::string>& params) {
+  std::vector<std::string> vec;
+  vec.reserve(params.size());
+  for (const std::string& param : params) {
+    vec.push_back(param);
+  }
+  return vec;
+}
+
+void AppendParamsToInput(
+    std::vector<uint8_t>& code,
+    const google::protobuf::RepeatedPtrField<std::string>& pb_params) {
+  std::vector<std::string> params = ParamsToVector(pb_params);
+  // Current offset for next complex data structure
+  size_t offset = params.size() * 32;
+  std::vector<std::string> strings;
+
+  for (const std::string& param : params) {
+    if (param.size() > 0 && (param[0] == '"' || param[0] == '\'')) {
+      // string found, append offset
+      auto content = param.substr(1, param.size() - 2);
+      strings.push_back(content);
+
+      // append offset to string
+      const auto pre_size = code.size();
+      code.resize(pre_size + 32u);
+      eevm::to_big_endian(offset, code.data() + pre_size);
+
+      // point offset at the next string slot
+      offset += 32 + ceil((double)content.size() / 32) * 32;
+      continue;
+    }
+    AppendArgToInput(code, eevm::to_uint256(param));
+  }
+
+  for (const std::string& str : strings) {
+    AppendArgToInput(code, str.size());
+    const auto pre_size = code.size();
+    code.resize(pre_size + ceil((double)str.size() / 32) * 32);
+    std::copy(str.begin(), str.end(), code.begin() + pre_size);
+  }
+}
+
 ContractManager::ContractManager() {
   gs_ = std::make_unique<eevm::SimpleGlobalState>();
 }
@@ -56,9 +102,7 @@ Address ContractManager::DeployContract(const Address& owner_address,
       AddressManager::CreateContractAddress(owner_address);
 
   auto contract_constructor = eevm::to_bytes(deploy_info.contract_bin());
-  for (const std::string& param : deploy_info.init_param()) {
-    AppendArgToInput(contract_constructor, param);
-  }
+  AppendParamsToInput(contract_constructor, deploy_info.init_param());
 
   try {
     auto contract = gs_->create(contract_address, 0u, contract_constructor);
@@ -73,6 +117,7 @@ Address ContractManager::DeployContract(const Address& owner_address,
       }
       return contract.acc.get_address();
     } else {
+      LOG(ERROR) << result.status();
       gs_->remove(contract_address);
       return 0;
     }
@@ -102,6 +147,8 @@ absl::StatusOr<std::string> ContractManager::ExecContract(
   }
 
   std::vector<uint8_t> inputs = eevm::to_bytes(func_addr);
+  // AppendParamsToInput(inputs, func_param.param());
+
   for (const std::string& param : func_param.param()) {
     AppendArgToInput(inputs, param);
   }
@@ -109,8 +156,10 @@ absl::StatusOr<std::string> ContractManager::ExecContract(
   auto result = Execute(caller_address, contract_address, inputs);
 
   if (result.ok()) {
+    LOG(ERROR) << "result hex: " << eevm::to_hex_string(*result);
     return eevm::to_hex_string(*result);
   }
+  LOG(ERROR) << "status: " << result.status();
   return result.status();
 }
 
diff --git a/repositories.bzl b/repositories.bzl
index 6b69cbf1..f666c8c5 100644
--- a/repositories.bzl
+++ b/repositories.bzl
@@ -7,9 +7,9 @@ def nexres_repositories():
     maybe(
         http_archive,
         name = "eEVM",
-        strip_prefix = "eEVM-118a9355d023748318a318bc07fc79063f015a94",
-        sha256 = "e86568aec425405fd8a48bbe487edeae4c0641be23b19411288e3b736018e1b6",
-        url = "https://github.com/microsoft/eEVM/archive/118a9355d023748318a318bc07fc79063f015a94.tar.gz",
+        strip_prefix = "eEVM-05efed8658b4e10a21253df8408b1f9bdb6f1445",
+        sha256 = "95652edde062b9be7a66cfc1ba32f3f8f08855539aac007492727dc2d9f36f7d",
+        url = "https://github.com/microsoft/eEVM/archive/05efed8658b4e10a21253df8408b1f9bdb6f1445.tar.gz",
         build_file = "@com_resdb_nexres//third_party:eEVM.BUILD",
     )
     maybe(
diff --git a/service/tools/contract/api_tools/config/server_config.config b/service/tools/contract/api_tools/config/server_config.config
index ec284753..420aa3ea 100644
--- a/service/tools/contract/api_tools/config/server_config.config
+++ b/service/tools/contract/api_tools/config/server_config.config
@@ -3,22 +3,22 @@
     replica_info : {
       id:1,
       ip:"127.0.0.1",
-      port: 10001,
+      port: 40001,
     },
     replica_info : {
       id:2,
       ip:"127.0.0.1",
-      port: 10002,
+      port: 40002,
     },
     replica_info : {
       id:3,
       ip:"127.0.0.1",
-      port: 10003,
+      port: 40003,
     },
     replica_info : {
       id:4,
       ip:"127.0.0.1",
-      port: 10004,
+      port: 40004,
     },
     region_id: 1,
   },
diff --git a/service/tools/contract/api_tools/contract_tools.cpp b/service/tools/contract/api_tools/contract_tools.cpp
index 0271b312..c2732cbb 100644
--- a/service/tools/contract/api_tools/contract_tools.cpp
+++ b/service/tools/contract/api_tools/contract_tools.cpp
@@ -18,10 +18,11 @@
  */
 
 #include <glog/logging.h>
+#include <unistd.h>  // For getopt
 
 #include <boost/algorithm/string.hpp>
+#include <string>
 #include <vector>
-#include <unistd.h>  // For getopt
 
 #include "interface/contract/contract_client.h"
 #include "platform/config/resdb_config_utils.h"
diff --git a/service/tools/contract/service_tools/start_contract_service.sh b/service/tools/contract/service_tools/start_contract_service.sh
index 28438d75..59785931 100755
--- a/service/tools/contract/service_tools/start_contract_service.sh
+++ b/service/tools/contract/service_tools/start_contract_service.sh
@@ -24,9 +24,9 @@ WORK_PATH=$PWD
 CERT_PATH=${WORK_PATH}/service/tools/data/cert/
 
 bazel build //service/contract:contract_service
-nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node1.key.pri $CERT_PATH/cert_1.cert > server0.log &
-nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node2.key.pri $CERT_PATH/cert_2.cert > server1.log &
-nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node3.key.pri $CERT_PATH/cert_3.cert > server2.log &
-nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node4.key.pri $CERT_PATH/cert_4.cert > server3.log &
+nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node1.key.pri $CERT_PATH/cert_1.cert > contract-server0.log &
+nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node2.key.pri $CERT_PATH/cert_2.cert > contract-server1.log &
+nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node3.key.pri $CERT_PATH/cert_3.cert > contract-server2.log &
+nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node4.key.pri $CERT_PATH/cert_4.cert > contract-server3.log &
 
-nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node5.key.pri $CERT_PATH/cert_5.cert > client.log &
+nohup $SERVER_PATH $SERVER_CONFIG $CERT_PATH/node5.key.pri $CERT_PATH/cert_5.cert > contract-client.log &
